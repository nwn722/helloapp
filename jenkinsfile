def AWS_ACCOUNT_ID = "715451173743"
def IMAGE = "helloapp"
def REGION = "ap-northeast-1" 
def GIT_REPO = "git@github.com:nwn722/helloapp.git"
pipeline {
    agent {
        label 'aws.ec2.ap.east.jenkins.worker'
    }
    stages {
        stage('Clone repository') {
            steps {
                // git branch: 'main',
                // credentialsId: 'nwn722',
                // url: "$GIT_REPO"

                checkout scmGit(
                    branches: [[name: '097ce95f2ffdff008f007e5e2e760197751dbc71']], 
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: 'nwn722', 
                    url: 'git@github.com:nwn722/helloapp.git']])
            }
        }
         stage('Build Docker Image') {
             steps {
                 sh 'make ENV=PROD build-container'
             }
         }
          stage('Push Docker Image to ECR') {
              steps {
                  
                  withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                    accessKeyVariable:'AWS_ACCESS_KEY_ID', 
                                    secretKeyVariable:'AWS_SECRET_ACCESS_KEY', 
                                    credentialsId:'sandbox-cred']]) {
                      sh "aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
                      sh "docker tag $IMAGE ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${IMAGE}:latest"
                      sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${IMAGE}:latest"
                      sh "docker tag ${IMAGE} ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${IMAGE}:${BUILD_NUMBER}"
                      sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${IMAGE}:${BUILD_NUMBER}"
                    }         
             }
         }


          stage("Update the ECS service") {
            steps {

                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                    accessKeyVariable:'AWS_ACCESS_KEY_ID', 
                                    secretKeyVariable:'AWS_SECRET_ACCESS_KEY', 
                                    credentialsId:'sandbox-cred']]) {
                    sh "aws ecs update-service --cluster ECS-CLUSTER-SN --service hellosvc --force-new-deployment"
                                    }
             }
         }
    }
}